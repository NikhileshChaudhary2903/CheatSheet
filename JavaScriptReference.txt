JavaScript Help

- High Level Interpreted Programming Language
- Confirms to ECMAScript Specification
- Runs on the Client/Browser as well (Server Side NodeJS)

console.log()/error();

var isn't used anymore.

String Templating

const name = "nikhil";
const age =26;
console.log(`My name is ${name} and I am ${age}`);



Data Types

Undefined --> ( let z;)

null typeof(null) -> Object ie const y = null;
Number for float,integer,decimal
String
Object
Symbol
Boolean 

1. Strings are immutable 

let str = "Hello World";
str[0] = 'J'; // Error 

String Methods

str.split();
   .substring(0);
   .toUpperCase();
   .toLowerCase();

2. let str;

console.log(typeof(str))
Output: undefined

4. let str = null;

str += 100;
console.log(str);

Output: 100

However

let str;

str += 100;
console.log(str);

Output: null

5. Arrays 

var myArray = ["Quincy",1];
const arrays = new Array(1,23,43,132);

let array = [];
console.log(typeof(array))

Output: object

let array = new Array();
array.push(1);
array.push(2);
array.push(3);

Remove using pop()
Push using push()

shift() removes the first element of array
unshift() adds to the beginning of array

array.unshift("first");

Array.isArray(arr) to check if arr is an array

array.indexOf(e);

6. Scopes

var outerWear = "T-Shirt";

function myFunc() {

var outerWear = "Sweater";
return outerWear;
}

console.log(myFunc());
console.log(outerWear);

7. If you don't return any value from a function it returns undefined

8. Var myArray = []

JSON.stringify(myArr) to convert to JSON

9. Strict Equality Operator ===

3 === '3' no type conversion

String is converted to number if we use == equal Ie 3 =='3'

10. JS Objects

var myDog = {
    name : "Camper",
    legs : 4,
    tails : 1,
    friends : "everything"
}

console.log(myDog['friends']);

myDog.name -> myDog['name'] same

TO add properties 
myDog['bark'] = sth;

delete myDog.bark;

11. How to check if object has property 

myDog.hasOwnProperty('prop');

for(var prop in myDog) {
        console.log(prop + ":" + myDog[prop]);
    }

12. parseInt function

Function convertToInteger(str) {

 return parseInt(str);
}

If string can't be converted it return NaN
var x = parseInt("12345string");
console.log(x);
Output: 12345 only when integer is starting me

13. Var vs let

Let doesn't allow you to declare var twice (duplicate)

"use strict" on top of file or function

Let has block scope or in the scope where it is defined

Const is read only can't reassign to some other value
const SENTENCE = "THIS ISNT COOL"

const s = [2,4,5]

S = []; // error

s[0] = 4; // no error 

14. To Prevent object mutation

Object.freeze(prop);

15. Anonymous Function

const magic = () => {
	
};

const myConcat = (arr1,arr2) => {
	arr1.concat(arr2);
};

16. Filter function on array

let x = [1,2,3,-4,-5,-6];

const sqArray = (arr) => {
  const squaredInts = arr.filter(num => Number.isInteger(num) && num > 0);
  return squaredInts;  
};

const squaredInts = sqArray(x);
console.log(squaredInts);

Map Function

let x = [1,2,3,-4,-5,-6];

const sqArray = (arr) => {
  const squaredInts = arr.filter(num => Number.isInteger(num) && num > 0).map(x => x * x);
  return squaredInts;  
};

const squaredInts = sqArray(x);
console.log(squaredInts);

17. Copy of array

arr2 = [.. arr1]; // just another copy

18. Assign Variables from Objects

var voxel = {x : 3, y:7, z:6};

var x = vowel.x;
var y = voxel.y;

Or use this

const {x: a, y : b, z:c} = voxel;

const person = {
	
 firstName: '',
 lastName: '',
 age : 
 }

const { firstName, lastName} = person;

19. Const [ , , ... arr] = list

Removes the first 2 elements of array


20. For of loop

const todos = [{id, text,isCompleted},{},{}];

for(let todo of todos) {

} 

Or 

todos.forEach(function(todo) {
	
 console.log(todo.prop);
});

Map Function

const todoText = todos.map(function(todo) {
 return todo.txt;
});

Map returns a new array

Filter Function

const todoCompleted = todos.filter(function(todo) {
 return todo.isCompleted === true;
});

You can chain this further ie 
const todoCompleted = todos.filter(function(todo) {
 return todo.isCompleted === true;
}).map();

